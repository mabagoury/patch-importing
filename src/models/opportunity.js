const mongoose = require("mongoose");

const opportunitySchema = mongoose.Schema({
  realmId: String,
  deleted: { type: Boolean, default: false },
  deletedAt: { type: Date, default: null },
  deletedBy: { type: objectId, ref: "accounts" },
  customer: { type: objectId, ref: "customers" },
  leadId: String,
  lastAssignedDate: {
    type: Date,
    default: null,
  },
  opportunityInformation: {
    title: String,
    salutation: String,
    firstName: String,
    lastName: String,
    company: String,
    phone: String,
    mobile: String,
    email: String,
    secondaryEmail: String,
    secondaryPhone: String,
    opportunityImage: String,
    address: {
      address: String,
      street: String,
      city: String,
      state: String,
      country: String,
      zip: String,
    },
  },
  territoryId: { type: objectId, ref: "salesterritorys", default: null },
  opportunityOwner: { type: objectId, ref: "accounts" },
  probability: Number,
  discount: Number,
  revenue: { type: Number, default: 0 },
  closeDate: String,
  units: [
    {
      unitId: { type: objectId, ref: "properties" },
      qty: { type: Number, default: 1 },
      price: Number,
      notes: String,
      total: Number,
      reservationId: { type: objectId, ref: "unitReservations" },
      _id: false,
    },
  ],
  promoId: String,
  opportunityType: String,
  opportunitySource: String,
  status: String,
  opportunityRating: Number,

  activityLog: [
    {
      taskId: { type: objectId, ref: "tasks" },
      userId: { type: objectId, ref: "accounts" },
      activityNumber: Number,
      activity: String,
      activityDate: String,
      activityDateTime: { type: Date },
      logs: String,
      outcome: String,
      time: String,
      location: {
        type: {
          type: String,
          enum: ["Point"],
          default: "Point",
        },
        coordinates: {
          type: [Number],
        },
      },
      voiceNotes: [voiceNoteSchema]
    },
  ],
  notes: [String],
  documents: [{ uploadDate: String, fileUrl: String }],
  taskId: { type: objectId, ref: "tasks" },
  idengagerRequestId: String,
  opportunityDescription: String,
  stage: String,
  forecastCategory: String,
  uid: { type: String, unique: true, sparse: true },
  salesstageId: { type: objectId, ref: "salesstages" },
  createdBy: { type: objectId, ref: "accounts" },
  modifiedBy: { type: objectId, ref: "accounts" },
  salesMan: { type: objectId, ref: "salesmen" },
  projectId: { type: objectId, ref: "projects" },
  region: String,
  customFields: Array,
  creationDate: String,
  modificationDate: String,
  stagesTime: [
    {
      userId: { type: objectId, ref: "accounts" },
      stage: String,
      date: String,
      notes: String,
      actions: String,
      taskId: { type: objectId, ref: "tasks" },
      probability: Number,
      reason: String,
    },
  ],
  setName: String,
  campaignName: String,
  totalRevenue: Number,
  interests: [String],
  additionalEmails: [String],
  additionalPhones: [String],

  opportunityNumber: { type: Number, sparse: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  workflow: [
    {
      level: Number,
      userId: { type: objectId, ref: "accounts" },
      action: String,
      approvalNotes: String,
      closeReason: String,
      rejectionReason: String,
      feedback: String,
    },
  ],
  workflowStart: {type: Boolean, default: false},
  workflowStartDate: {type: Date},
  docStatus: String,
  customField: { type: Object, default: {} },
  doneDeal: { type: Boolean, default: false },
  UDMPartyId: { type: objectId, ref: "UDMParty" },
  UDMContactId: { type: objectId, ref: "UDMContact" },
}, {timestamps: true});

module.exports = mongoose.model("Opportunity", opportunitySchema);
